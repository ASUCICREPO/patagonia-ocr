podTemplate(containers: [
    containerTemplate(
      name: 'jnlp', image: 'jenkins/jnlp-slave:3.29-1',
      args: '${computer.jnlpmac} ${computer.name}',
      resourceRequestCpu: '150m',
      resourceLimitCpu: '650m',
      resourceRequestMemory: '256Mi',
      resourceLimitMemory: '768Mi'
      ),
  ]) {
  node(POD_LABEL) {
    stage('Clone Repo') {
      container('jnlp') {
        //Debugging info
        echo "****** Branch Name: ${env.BRANCH_NAME} ******"
        echo "****** PR Branch: ${env.CHANGE_BRANCH} ******"
        echo "****** PR Target Branch: ${env.CHANGE_TARGET} ******"

        //Checkout branch
        if (env.CHANGE_TARGET == null) {
          git branch: "${env.BRANCH_NAME}", credentialsId: 'Bitbucket-Patagonian', url: 'https://agustin_lucchetti@bitbucket.org/patagoniantech/asu-cic-textract-api.git'
        } else {
          git branch: "${env.CHANGE_BRANCH}", credentialsId: 'Bitbucket-Patagonian', url: 'https://agustin_lucchetti@bitbucket.org/patagoniantech/asu-cic-textract-api.git'
        }
      }
    }

    stage('SonarQube analysis') {
      container('jnlp') {
        def scannerHome = tool 'default sonar-scanner';
        withSonarQubeEnv('Patagonian-Sonarqube-stitch') {
          //Sonar requires Node JS 6.x or superior, bu
          nodejs('NodeJS-LTS-10') {
            def nodejsHome = tool 'NodeJS-LTS-10'
            env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
            if (env.CHANGE_TARGET == null) {
              sh "${scannerHome}/bin/sonar-scanner -Dsonar.branch.name=${env.BRANCH_NAME} -Dsonar.branch.target=master"
            } else {
              sh "${scannerHome}/bin/sonar-scanner -Dsonar.branch.name=${env.CHANGE_BRANCH} -Dsonar.branch.target=${env.CHANGE_TARGET}"
            }
          }
        }
      }
    }
  }
}

// No need to occupy a node
stage("Wait for Quality Gate") {
  // Just in case something goes wrong, pipeline will be killed after a timeout
  timeout(time: 10, unit: 'MINUTES') {
    // Reuse taskId previously collected by withSonarQubeEnv
    def qg = waitForQualityGate()
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
