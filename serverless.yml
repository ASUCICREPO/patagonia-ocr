service: asu-cic-ocr-api

frameworkVersion: '>=1.65.0 <2.0.0'

custom:
  BUCKET: ${self:service}-${opt:stage, self:provider.stage}-documents
  SNStopicName: ${self:service}-${opt:stage, self:provider.stage}-topic
  SNStopicArn:
    Fn::Join:
      - ":"
      - - "arn:aws:sns"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
        - ${self:custom.SNStopicName}

  TextractRoleName: ${self:service}-${opt:stage, self:provider.stage}-textract-role
  TextractRoleArn:
    Fn::Join:
      - ":"
      - - "arn:aws:iam:"
        - Ref: "AWS::AccountId"
        - "role/${self:custom.TextractRoleName}"

provider:
  name: aws
  region: ${env:REGION}
  runtime: nodejs12.x
  timeout: 30
  memorySize: 1024

  deploymentBucket:
    maxPreviousDeploymentArtifacts: 10
    blockPublicAccess: true
    serverSideEncryption: AES256

  iamRoleStatements:

    - Effect: "Allow"
      Action:
      - "s3:HeadObject"
      - "s3:GetObject"
      - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.BUCKET}
            - "/*"

    - Effect: "Allow"
      Action:
      - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.BUCKET}

    - Effect: "Allow"
      Action:
        - "textract:StartDocumentAnalysis"
        - "textract:GetDocumentAnalysis"
        - "textract:AnalyzeDocument"
      Resource: "*"

    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: ${self:custom.SNStopicArn}

  environment:
    API_KEYS: ${env:API_KEYS}
    BUCKET: ${env:BUCKET}
    REGION: ${env:REGION}

  apiGateway:
      binaryMediaTypes:
        - '*/*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    DocumentsBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.BUCKET}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        LifecycleConfiguration:
          Rules:
            -
              ExpirationInDays: 14
              Status: Enabled

    TextractSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.SNStopicName}
        TopicName: ${self:custom.SNStopicName}

    TextractRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.TextractRoleName}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "textract.amazonaws.com"
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        Policies:
          - PolicyName: "TextractRoleAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "textract:*"
                  Resource: "*"

package:
  exclude:
    - ".*/**"
    - "node_modules/aws-sdk/**" # aws-sdk is available in Lambda NodeJS runtime, don't deploy it
    - "_samples/**"
  include:
    - lib/

functions:

  process-document:
    handler: handler.process
    environment:
      SNS_TOPIC_ARN: ${self:custom.SNStopicArn}
      TEXTRACT_ROLE_ARN: ${self:custom.TextractRoleArn}
    events:
      - http:
          path: ocr
          method: post
          cors: true
      - sns:
          arn: ${self:custom.SNStopicArn}
          topicName: ${self:custom.SNStopicName}

  retrieve-result:
    handler: handler.retrieve
    events:
      - http:
          path: ocr/{requestId}
          method: get
          cors: true

